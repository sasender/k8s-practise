In this hands-on lab, we will be presented with a number of broken pods. We must identify the problem and take the quickest route to resolve the problem in order to get our cluster back up and running.

Log in to the Kube Master server using the credentials on the lab page (either in your local terminal, using the Instant Terminal feature, or using the public IP), and work through the objectives listed.

Identify the broken pods.
Use the following command to see whatâ€™s in the cluster:

kubectl get all --all-namespaces
To make this a little easier to read, you could run the following command to view services, pods, and deployments:

kubectl get svc,po,deploy -n web
Find out why the pods are broken.
Use the following command to inspect one of the broken pods and view the events, substituting the name of the pod for POD_NAME:

kubectl describe pod POD_NAME -n web
Repair the broken pods.
Use the following command to repair the broken pods in the most efficient manner:

kubectl edit deploy nginx -n web
Where it says image: nginx:191, change it to image: nginx. Save and exit.

Verify the repair is complete:

kubectl get po -n web
See the new replica set:

kubectl get rs -n web
Ensure pod health by accessing the pod directly.
List the pods including the IP addresses:

kubectl get po -n web -o wide
Start a busybox pod:

kubectl run busybox --image=busybox --rm -it --restart=Never -- sh
Use the following command to access the pod directly via its container port, replacing POD_IP_ADDRESS with an appropriate pod IP:

wget -qO- POD_IP_ADDRESS:80