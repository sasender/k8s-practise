Step 1: Create service account in a namespace
kubectl create namespace devops-tools [enter name space here insated of devops-tools]

Create a service account named “api-service-account” in devops-tools namespace
kubectl create serviceaccount api-service-account -n devops-tools
Step 2: Create a Cluster Role:
Assuming that the service account needs access to the entire cluster resources, we will create a cluster role with a list of allowed access.
api-cluster-role.yaml

Step 3: Create a CluserRole Binding:
Now that we have the ClusterRole and service account, it needs to be mapped together.
Bind the cluster-api-role to api-service-account using a RoleBinding
cat <<EOF | kubectl apply -f 
Step 4: Validate Service Account Access Using kubectl:
kubectl auth can-i get pods --as=system:serviceaccount:devops-tools:api-service-account

Step 5: Validate Service Account Access Using API call:
kubectl get serviceaccount api-service-account  -o=jsonpath='{.secrets[0].name}' -n devops-tools

Use the secret name to get the base64 decoded token. It will be used as a bearer token in the API call.

kubectl get secrets  <service-account-token-name>  -o=jsonpath='{.data.token}' -n devops-tools | base64 -D

if any querys visit these website https://devopscube.com/kubernetes-api-access-service-account/


kubectl create namespace devops-tools
kubectl create serviceaccount api-service-account -n devops-tools
kubectl api-resources
kubectl auth can-i get pods --as=system:serviceaccount:devops-tools:api-service-account
kubectl auth can-i delete deployments --as=system:serviceaccount:devops-tools:api-service-account

kubectl get serviceaccount api-service-account  -o=jsonpath='{.secrets[0].name}' -n devops-tools

kubectl get secrets  <service-account-token-name>  -o=jsonpath='{.data.token}' -n devops-tools | base64 -D

kubectl get secrets  api-service-account-token-pgtrr  -o=jsonpath='{.data.token}' -n devops-tools | base64 --decode