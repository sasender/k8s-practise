Creating a Service and Discovering DNS Names in Kubernetes
We have been given a three-node cluster. Within that cluster, we must perform the following tasks in order to create a service and resolve the DNS names for that service. We will create the necessary Kubernetes resources in order to perform this DNS query.

To adequately complete this hands-on lab, we must have a working deployment, a working service, and be able to record the DNS name of the service within our Kubernetes cluster.

Log in to the Kube Master server using the credentials on the lab page (either in your local terminal, using the Instant Terminal feature, or using the public IP), and work through the objectives listed.

Create an nginx deployment, and verify it was successful.
Use this command to create an nginx deployment:

kubectl run nginx --image=nginx
Use this command to verify deployment was successful:

kubectl get deployments
Create a service, and verify the service was successful.
Use this command to create a service:
kubectl expose deployment nginx --port 80 --type NodePort
Use this command to verify the service was created:
kubectl get services
Create a pod that will allow you to query DNS, and verify itâ€™s been created.
Using an editor of your choice (e.g., Vim and the command vim busybox.yaml), enter the following YAML to create the busybox pod spec:

apiVersion: v1
kind: Pod
metadata:
  name: busybox
spec:
  containers:
  - image: busybox:1.28.4
    command:
      - sleep
      - "3600"
    name: busybox
  restartPolicy: Always
Use the following command to create the busybox pod:

kubectl create -f busybox.yaml
Use the following command to verify the pod was created successfully:

kubectl get pods
Perform a DNS query to the service.
Use the following command to query the DNS name of the nginx service:

kubectl exec busybox -- nslookup nginx
Record the DNS name.
Record the name of:

[service-name].default.svc.cluster.local


installing grafana 
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: grafana
  name: grafana
spec:
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      securityContext:
        fsGroup: 472
        supplementalGroups:
          - 0
      containers:
        - name: grafana
          image: grafana/grafana:7.5.2
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
              name: http-grafana
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /robots.txt
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 2
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 3000
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 250m
              memory: 750Mi
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: grafana-pv
      volumes:
        - name: grafana-pv
          persistentVolumeClaim:
            claimName: grafana-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
spec:
  ports:
    - port: 3000
      protocol: TCP
      targetPort: http-grafana
  selector:
    app: grafana
  sessionAffinity: None
  type: LoadBalancer


steps: 
Run the following command: kubectl apply -f grafana.yaml

Check that it worked by running the following: kubectl port-forward service/grafana 3000:3000

Navigate to localhost:3000 in your browser. You should see a Grafana login page.

Use admin for both the username and password to login.







